Imports Required
----------------------------------------------------------------------------------------------------------------------------
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.core.env.Environment;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
--------------------------------------------------------------------------------------------------------------------------------
@SpringBootApplication
@Autowired
@Entity
@Id
@Enumerated(value=EnumType.STRING)
@Repository
@Service
@Transactional
@AfterThrowing(pointcut = "execution(* com.infy.service.*Impl.*(..))", throwing = "exception")
-----------------------------------------------------------------------------------------------------------------
public static final Log LOGGER = LogFactory.getLog(LoggingAspect.class);
-------------------------------------------------------------------------------------------------------
UserInterface.UPDATE_SUCCESS=Customer details successfully updated.
Service.CUSTOMER_ALREADY_EXISTS=Customer already present. Add customer with different details.
UserInterface.INSERT_SUCCESS=Customer details added successfully.

Service.CUSTOMER_UNAVAILABLE=Customer details not found. Give valid customer id.
# MySQL settings
#Change these settings according to database you are using
spring.datasource.url=jdbc:mysql://localhost:3306/customer_db
spring.datasource.username=root

#If MySQL installation is password proctored,then use below property to set password
spring.datasource.password=password@123

#JPA settings
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
----------------------------------------------------------------------------------------------------------------------
#Name of the Properties file
name=LoggerConfigFile

#Declaring logger for business logic
logger.file.name=com.infy.utility
logger.file.level=DEBUG
logger.file.appenderRef.file.ref=LoggerAppender
logger.file.additivity=false

#Declaring logger for business console
logger.console.name=com.infy
logger.console.level=INFO
logger.console.appenderRef.file.ref=ConsoleAppender
logger.console.additivity=false

# File Appender
appender.file.name=LoggerAppender
appender.file.type=File
appender.file.fileName=log/ErrorLog.log
#Logging Pattern
appender.file.layout.type=PatternLayout
appender.file.layout.pattern=%d{dd-MMM-yyyy HH:mm:ss} %level - %m%n


# Console Appender
appender.console.name=ConsoleAppender
appender.console.type=Console
#Logging Pattern for console
appender.console.layout.type=PatternLayout
appender.console.layout.pattern=%m%n

-------------------------------------------------------------------------------------------------------------------------------
<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-log4j2</artifactId>
		</dependency>
	</dependencies>
-----------------------------------------------------------------------------------------------------------------------------------
1. For us the ORM being used is Hibernate.
2. We add the starter dependencies as mysql-connector-java and  spring-starter-data-jpa. 
3. We need to update application.properties for database connectivity.
   The application.properties is within resource folder.
-----------------------------------------------------------------------------------------------------------------------------------
data.sql

drop database if exists school_db;
create database school_db;
use school_db;
create table student(
   roll int primary key,
   name varchar(20),
   marks int
);
insert into student values(1,'Rohit',90);
commit;
select * from student;
---------------------------------------------------------------------------------------------------------------------------------
We create the packages:-
 com.school.service;
 com.school.repository;
 com.school.dto;
 com.school.entity;
  
 Right click on com.school and start creating the packages.
FORMATTING THE CODE WHICH WE ARE WRITING IN THE EDITOR ctrl+shift+f.

  
  @Transactional
  public class StudentServiceImpl implements StudentService {
  
    @Autowired
   private StudentRepository studentRepository;  
     // Either both the methods namely update and delete should happen but if one
     // fails , rollback should happen
    public void update(){
        studentRepository.update();
        studentRepository.delete();
     }

  }
// In the above calse update and delete are getting executed under a single transaction
// maybe that we want. 
    
  public class StudentRepositoryImpl implements StudentRepository{

     // update will be taking place in one transaction
     // delete will be in another new transaction
    public void update(){}
    public void delete(){}
  }
}







  public class StudentServiceImpl implements StudentService {
  
    @Autowired
   private StudentRepository studentRepository;  
     // Either both the methods namely update and delete should happen but if one
     // fails , rollback should happen
    public void update(){
        studentRepository.update();
        studentRepository.delete();
     }

  }

    
  @Transactional
  public class StudentRepositoryImpl implements StudentRepository{

     // update will be taking place in one transaction
     // delete will be in another new transaction
    public void update(){}
    public void delete(){}
  }
}

@PersistenceContext should be preferred over @Autowired for injecting EntityManager

Why should @PersistenceContext should be used?

When multiple clients call the application, each call creates a unique thread.

Persistence Context is specifically designed so as to create unique EntityManager for every thread whereas Autowired creates the same Entity Manager for all the threads. This can become a design flaw as multiple clients may access the same entity.

Thus, as a best practice, always use @PersistenceContext for injecting the EntityManager.



Java Persistence Query Language (JPQL). These queries are defined using entity classes and its attributes instead of tables and columns. This makes it easy for Java developers to use it. But since database uses SQL, JPA implementations translate the JPQL query into SQL using query translator.


Query interface

To create and execute JPQL queries, JPA provides Query interface. An object of Query interface is created through EntityManager interface using createQuery method as follows:

Query query = entityManager.createQuery("SELECT c FROM Customer c");
where SELECT c from CustomerEntity c is a JPQL query.

This interface provides following methods to execute a query:

List getResultList() : This method executes select queries and returns a List of results. It throws IllegalStateException if called for update and delete queries.

Integer executeUpdate() : This method executes update and delete queries. It returns the number of rows updated or deleted. It throws IllegalStateException if called for select queries.

Object getSingleResult() : This method executes select query which returns a single result. If no result available it throws NoResultException. It throws NonUniqueResultException if query returns more than one results and IllegalStateException if called for update and delete queries.


Query query = entityManager.createQuery("SELECT c FROM Customer c");
              query.getResultList();
  // In place of select if we write update or delete , it will throw IllegalStateException

Query query = entityManager.createQuery("SELECT c FROM Customer c");
              query.getSingleResult();  // The exception NonUniqueResultException will be thrown as multiple records are returned from               the table.

-------------------------------------------------------------------------------------------------------------------

 Query query=entityManager.createQuery("select s from Student s where s.roll=?1 and s.name=?2");
   int roll=100;
   String name="Sunil";
   query.setParameter(1,roll);
   query.setParameter(2,name);
   List<Student> studentList=query.getResultList();
------------------------------------------------------------------------------------------------------------------


 Query query=entityManager.createQuery("select s from Student s where s.roll=:rol and s.name=:nam");
   int roll=100;
   String name="Sunil";
   query.setParameter("rol",roll);
   query.setParameter("nam",name);
   List<Student> studentList=query.getResultList();
 ---------------------------------------------------------------------------------------------------------------------  

  weekend_demo_codes_1_10_2022_to_2_10_2022 




